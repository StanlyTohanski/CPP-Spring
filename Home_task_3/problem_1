#include <set>
#include <vector>
#include <iostream>
#include <random>
#include <array>
#include <random>
#include <chrono>
#include <iomanip>
#include <algorithm>

class Timer
{
public:
	using clock_t = std::chrono::steady_clock;
	using time_point_t = clock_t::time_point;
	void pause() { // остановить таймер
		v.push_back(clock_t::now());
		std::cout << "Pause" << std::endl;
	}
	void go_on() { // продолжить счёт времени таймера
		v.push_back(clock_t::now());
		std::cout << "Continue" << std::endl;
	}

	Timer() : m_begin(clock_t::now()) {}
	~Timer()
	{
		auto end = clock_t::now();
		auto temp = end;
		for (size_t i = 0; i < size(v); i += 2) { //вычитаем перерывы
			if (i + 1 > size(v)) { // можно отключить таймер на паузе
				end -= temp - v[i];
				break;
			}
			end -= v[i + 1] - v[i];

		}
		std::cout << "milliseconds	" << std::chrono::duration_cast <
			std::chrono::milliseconds> (end - m_begin).count() << std::endl;
	}

private:
	time_point_t m_begin;
	std::vector <time_point_t> v; // вектор точек остановок и включений
};
int main()
{
	const int N = 100;
	std::set<int> s;
	std::vector<int> v;
	std::array<int, N> a;

	{
		std::cout << " vector_time\t";
		Timer t;
		for (size_t i = 0; i < N; i++) {
			v[i] = std::rand() % 400;
		}
	}
	std::cout << std::endl;
	{
		std::cout << " set_time\t";
		Timer t;
		for (size_t i = 0; i < N; i++) {
			s.insert(v[i]);
		}
	}
	std::cout << std::endl;
	{
		std::cout << " array_time\t";
		Timer t;
		for (size_t i = 0; i < N; i++) {
			a[i] = v[i];
		}
	}
	std::cout << std::endl;

	return 0;
}
